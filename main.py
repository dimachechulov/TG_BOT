from datetime import timedelta, date
import requests
import asyncio
import aiohttp
import re
import sqlite3
import json
import random


from datetime import date
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from keyboards import *
from config import *
from pagination import InlinePagination, InlinePagination2, FavoritesPagination, NewsPagination
from db import Sqliter
import asyncio
import functools
import itertools
import logging
import time
import typing

import aiohttp
from aiohttp.helpers import sentinel

bot = Bot(token=TOKEN)#, parse_mode='HTML'
admin_id = admins
chatid = chat
storage = MemoryStorage()
dp = Dispatcher(bot)#, storage=storage
scheduler = AsyncIOScheduler()
db = Sqliter('database.db')
temp_film = []
temp_series = []
temp_chanel = []
@dp.message_handler(content_types=['photo'])
async def scan_message(msg: types.Message):
    document_id = msg.photo[0].file_id
    file_info = await bot.get_file(document_id)
    print(f'file_id: {file_info.file_id}')
    print(f'file_path: {file_info.file_path}')
    print(f'file_size: {file_info.file_size}')
    print(f'file_unique_id: {file_info.file_unique_id}')
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def process_photo(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    photos = message.photo

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
    for photo in photos:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await photo.download()
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        #process_photo(photo.file)
category_list = {'films': '–§–∏–ª—å–º—ã', 'serials' : '–°–µ—Ä–∏–∞–ª—ã','series' : '–°–µ—Ä–∏–∞–ª—ã', 'cartoons':'–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã', 'cartoon':'–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã', 'cartoon-serials' : '–ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª—ã', 'cartoon-series': '–ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª—ã', 'anime-film': '–ê–Ω–∏–º–µ-—Ñ–∏–ª—å–º—ã', 'anime' : '–ê–Ω–∏–º–µ-—Ñ–∏–ª—å–º—ã', 'anime-serials' : '–ê–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª—ã', 'anime-series' : '–ê–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª—ã', 'tv-shows' : '–¢–í-–®–æ—É', 'tv-show': '–¢–í-–®–æ—É', 'film': '–§–∏–ª—å–º—ã'}
last_domain = ''

'''
@dp.message_handler(content_types=['photo'])
async def handle_text(message: types.Message, state: FSMContext):
    #temp_film.append(message.text)
    print("YESsss")
    img_id =  message.photo[-1].file_id
    await bot.send_message(message.from_user.id, '–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=AdminError)
    #await message.photo[-1].download(destination_file=f'D:/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/images/test.jpg')
    try:
        #db.add_film(temp_film)
        await bot.send_message(message.from_user.id, '–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',reply_markup=AdminError)
    except:
        await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ',reply_markup=series_back)'''
class GetUserInfo(StatesGroup):
    us_zapros_video = State()
    us_zapros_film = State()
    us_zapros_serial = State()
    us_zapros_animefilm = State()
    us_zapros_animeser = State()
    us_zapros_cartoon = State()
    us_zapros_cartoonser = State()
    us_zapros_tv = State()
    us_zapros_film_number = State()
    us_zapros_serial_number = State()
    us_zapros_animefilm_number = State()
    us_zapros_animeser_number = State()
    us_zapros_cartoon_number = State()
    us_zapros_cartoonser_number = State()
    us_zapros_tv_number = State()
    us_add_film = State()
    us_add_series = State()
    us_add_admin = State()
    us_add_chanel = State()
    us_del_film = State()
    us_del_series = State()
    us_del_admin = State()
    us_del_chanel = State()
    us_add_film1 = State()
    us_add_film2 = State()
    us_add_film3 = State()
    us_add_film4 = State()
    us_add_film5 = State()
    us_add_film6 = State()
    us_add_series1 = State()
    us_add_series2 = State()
    us_add_series3 = State()
    us_add_series4 = State()
    us_add_series5 = State()
    us_add_series6 = State()
    us_add_chanel1 = State()
    us_add_chanel2 = State()
    us_add_chanel3 = State()
    search_film = State()
    search_series = State()



database = open("users_id.txt", "r", encoding="utf-8")
datausers = set()
for line in database:
    datausers.add(line.strip())
database.close()

@dp.callback_query_handler(text="about", state="*")
async def send(call: types.CallbackQuery):
  await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/about.png">üéûÔ∏è</a> <b><u>Kinozzz Bot</u></b> ‚Äî <b>–ø–µ—Ä–≤—ã–π –æ–Ω–ª–∞–π–Ω-–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä</b> –≤ Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b><u>–±–µ—Å–ø–ª–∞—Ç–Ω–æ</u></b> –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –Ω–æ–≤–∏–Ω–∫–∞–º–∏ <b>–†–æ—Å—Å–∏–π—Å–∫–æ–≥–æ</b> –∏ <b>–∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ</b> –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∞.\n\nüí° <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n‚Äî –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤, –¢–í-—à–æ—É, –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏ —Ç.–ø. –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é;\n‚Äî <b>–ü–æ–¥–±–æ—Ä–∫–∏</b> –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤;\n‚Äî –§—É–Ω–∫—Ü–∏—è <b>¬´–ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏¬ª</b>, —á—Ç–æ–±—ã –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º;\n‚Äî –£–¥–æ–±–Ω—ã–π –ø–ª–µ–µ—Ä;\n‚Äî –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞;\n‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∞–º–∏ –∫–∏–Ω–æ.', reply_markup=about)

@dp.callback_query_handler(text="contacts", state="*")
async def send(call: types.CallbackQuery):
  await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '–ü–æ –ø–æ–≤–æ–¥—É —Ä–µ–∫–ª–∞–º—ã –ø–∏—Å–∞—Ç—å https://t.me/Informis_mors', reply_markup=AdminError)

async def check_sub_channel(chanels,user_id):
    for chanel in chanels:
        chat_member = await bot.get_chat_member(chat_id=chanel[1],user_id=user_id)
        if chat_member['status'] == 'left':
            return False
    return True



@dp.callback_query_handler(text = 'subchanneldone')
async def subchanneldone(message:types.Message):
    CHANNELS = db.get_chanels()
    if await check_sub_channel(CHANNELS, message.from_user.id):
        await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")
        await bot.send_message(chat_id=message.from_user.id,
                                    text='üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>.\n\n<a href="https://bot.kinozzz.ru/poster/general.png">üé¶</a> –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>—Ä–∞–∑–¥–µ–ª</b>, –≤ –∫–æ—Ç–æ—Ä–æ–º –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.',
                                    reply_markup=inlinekeyboard)

    else:
        await bot.send_message(chat_id=message.from_user.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", reply_markup=get_chanels())

@dp.message_handler(commands = ['start'])
async def start(message:types.Message):
    if message.chat.type == 'private':
        temp = get_chanels()
        await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã",reply_markup=temp)

@dp.callback_query_handler(text="poisk", state="*")
async def send(call: types.CallbackQuery):
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",reply_markup=get_chanels())
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/poisk.png">üîç</a> –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ —Ñ–∏–ª—å–º–∞.', reply_markup=search)

#–ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–∞ –ø–æ –∫–æ–¥—É
@dp.callback_query_handler(text="search_series", state="*")
async def send(call: types.CallbackQuery):
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",reply_markup=get_chanels())
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä–∏–∞–ª–∞.')
        await GetUserInfo.search_series.set()
        await call.answer()
        @dp.message_handler(state=GetUserInfo.search_series)
        async def handle_text(message: types.Message, state: FSMContext):
            series = db.get_series(message.text)
            if(series):
                s = f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞:{series[0][1]}\n\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {series[0][3]} –º–∏–Ω—É—Ç\n\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {series[0][2]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{series[0][4]}\n\n'
                await bot.send_photo(chat_id=message.from_user.id, caption=s, photo=series[0][5])
                await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫?', reply_markup=search_back)
            else:
                await bot.send_message(message.from_user.id, '–°–µ—Ä–∏–∞–ª–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=search_back)
            await state.finish()
#–ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–æ–¥—É
@dp.callback_query_handler(text="search_films", state="*")
async def send(call: types.CallbackQuery):
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
                               reply_markup=get_chanels())
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.')
        await GetUserInfo.search_film.set()
        await call.answer()
        @dp.message_handler(state=GetUserInfo.search_film)
        async def handle_text(message: types.Message, state: FSMContext):

            film = db.get_film(message.text)
            if(film):
                s = f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:{film[0][1]}\n\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film[0][3]} –º–∏–Ω—É—Ç\n\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {film[0][2]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{film[0][4]}\n\n'
                await bot.send_photo(chat_id=message.from_user.id,caption=s, photo=film[0][5])
                await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫?', reply_markup=search_back)
            else:
                await bot.send_message(message.from_user.id, '–§–∏–ª—å–º–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            await state.finish()
@dp.message_handler(commands=["admin"])
async def send_all(message):
  admins = db.get_admins()
  if message.from_user.id not in admins:
    await bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=AdminError)
  else:
      await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=Admin)

@dp.callback_query_handler(text=["add_film"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    temp_film = []
    await bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞",reply_markup=Admin_back1)
    await GetUserInfo.us_add_film1.set()
    await call.answer()

    @dp.message_handler(state=GetUserInfo.us_add_film1)
    async def handle_text(message: types.Message, state: FSMContext):
        temp_film.append(message.text)
        await bot.send_message(message.from_user.id,"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞",reply_markup=Admin_back1)
        await state.finish()
        await GetUserInfo.us_add_film2.set()

        @dp.message_handler(state=GetUserInfo.us_add_film2)
        async def handle_text(message: types.Message, state: FSMContext):
            temp_film.append(message.text)
            await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–∞", reply_markup=Admin_back1)
            await state.finish()
            await GetUserInfo.us_add_film3.set()


            @dp.message_handler(state=GetUserInfo.us_add_film3)
            async def handle_text(message: types.Message, state: FSMContext):
                temp_film.append(message.text)
                await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö", reply_markup=Admin_back1)
                await state.finish()
                await GetUserInfo.us_add_film4.set()


                @dp.message_handler(state=GetUserInfo.us_add_film4)
                async def handle_text(message: types.Message, state: FSMContext):
                    temp_film.append(message.text)
                    await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞", reply_markup=Admin_back1)
                    await state.finish()
                    await GetUserInfo.us_add_film5.set()

                    @dp.message_handler(state=GetUserInfo.us_add_film5)
                    async def handle_text(message: types.Message, state: FSMContext):
                        temp_film.append(message.text)
                        await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ Url –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ", reply_markup=Admin_back1)
                        await state.finish()
                        await GetUserInfo.us_add_film6.set()

                        @dp.message_handler(content_types=types.ContentTypes.PHOTO, state=GetUserInfo.us_add_film6)
                        async def handle_photo_message(message: types.Message, state: FSMContext):
                            # process the photo message here
                            print("Received a photo message")

                            await state.finish()


    #await state.finish()


@dp.callback_query_handler(text=["add_series"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    temp_film = []
    await bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä–∏–∞–ª–∞",reply_markup=Admin_back1)
    await GetUserInfo.us_add_series1.set()
    await call.answer()

    @dp.message_handler(state=GetUserInfo.us_add_series1)
    async def handle_text(message: types.Message, state: FSMContext):
        temp_film.append(message.text)
        await bot.send_message(message.from_user.id,"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞",reply_markup=Admin_back1)
        await state.finish()
        await GetUserInfo.us_add_series2.set()

        @dp.message_handler(state=GetUserInfo.us_add_series2)
        async def handle_text(message: types.Message, state: FSMContext):
            temp_film.append(message.text)
            await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞ —Å–µ—Ä–∏–∞–ª–∞", reply_markup=Admin_back1)
            await state.finish()
            await GetUserInfo.us_add_series3.set()


            @dp.message_handler(state=GetUserInfo.us_add_series3)
            async def handle_text(message: types.Message, state: FSMContext):
                temp_film.append(message.text)
                await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–∏–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö", reply_markup=Admin_back1)
                await state.finish()
                await GetUserInfo.us_add_series4.set()


                @dp.message_handler(state=GetUserInfo.us_add_series4)
                async def handle_text(message: types.Message, state: FSMContext):
                    temp_film.append(message.text)
                    await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞", reply_markup=Admin_back1)
                    await state.finish()
                    await GetUserInfo.us_add_series5.set()

                    @dp.message_handler(state=GetUserInfo.us_add_series5)
                    async def handle_text(message: types.Message, state: FSMContext):
                        temp_film.append(message.text)
                        await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ Url –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ", reply_markup=Admin_back1)
                        await state.finish()
                        await GetUserInfo.us_add_series6.set()

                        @dp.message_handler(state=GetUserInfo.us_add_series6)
                        async def handle_text(message: types.Message, state: FSMContext):
                            temp_film.append(message.text)
                            try:
                                db.add_series(temp_film)
                                await bot.send_message(message.from_user.id, '–°–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',reply_markup=AdminError)
                            except:
                                await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ',reply_markup=series_back)
                            await state.finish()

@dp.callback_query_handler(text=["add_chanel"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    temp_film = []
    await bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",reply_markup=Admin_back1)
    await GetUserInfo.us_add_chanel1.set()
    await call.answer()

    @dp.message_handler(state=GetUserInfo.us_add_chanel1)
    async def handle_text(message: types.Message, state: FSMContext):
        temp_film.append(message.text)
        await bot.send_message(message.from_user.id,"–ù–∞–ø–∏—à–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞",reply_markup=Admin_back1)
        await state.finish()
        await GetUserInfo.us_add_chanel2.set()

        @dp.message_handler(state=GetUserInfo.us_add_chanel2)
        async def handle_text(message: types.Message, state: FSMContext):
            temp_film.append(message.text)
            await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ Url –∫–∞–Ω–∞–ª–∞", reply_markup=Admin_back1)
            await state.finish()
            await GetUserInfo.us_add_chanel3.set()


            @dp.message_handler(state=GetUserInfo.us_add_chanel3)
            async def handle_text(message: types.Message, state: FSMContext):
                temp_film.append(message.text)
                try:
                    db.add_chanel(temp_film)
                    await bot.send_message(message.from_user.id, '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=AdminError)
                except:
                    await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ', reply_markup=Admin_back)
                await state.finish()


@dp.callback_query_handler(text=["add_admin"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞",reply_markup=Admin_back1)
    await GetUserInfo.us_add_admin.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_add_admin)
    async def handle_text(message: types.Message, state: FSMContext):
        data = []
        data.append(message.text)
        try:
            db.add_admin(data)
            await bot.send_message(message.from_user.id, '–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=AdminError)
        except:
            await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ', reply_markup=Admin_back)
        await state.finish()



@dp.callback_query_handler(text=["del_film"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=Admin_back1)
    await GetUserInfo.us_del_film.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_del_film)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            db.del_film(message.text)
            await bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ñ–∏–ª—å–º", reply_markup=AdminError)
        except:
            await bot.send_message(call.message.chat.id, "–ö–æ–¥–∞ c —Ç–∞–∫–∏–º —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç",reply_markup=film_back1)
        await state.finish()

@dp.callback_query_handler(text=["del_series"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä–∏–∞–ª–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=Admin_back1)
    await GetUserInfo.us_del_series.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_del_series)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            db.del_series(message.text)
            await bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–µ—Ä–∏–∞–ª", reply_markup=AdminError)
        except:
            await bot.send_message(call.message.chat.id, "–ö–æ–¥–∞ c —Ç–∞–∫–∏–º —Å–µ—Ä–∏–∞–ª–æ–º –Ω–µ—Ç",reply_markup=series_back1)
        await state.finish()

@dp.callback_query_handler(text=["del_admin"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=Admin_back1)
    await GetUserInfo.us_del_admin.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_del_admin)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            db.del_admin(message.text)
            await bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∞–¥–º–∏–Ω–∞", reply_markup=AdminError)
        except:
            await bot.send_message(call.message.chat.id, "–ê–¥–º–∏–Ω–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç",reply_markup=series_back1)
        await state.finish()

@dp.callback_query_handler(text=["del_chanel"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=Admin_back1)
    await GetUserInfo.us_del_chanel.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_del_chanel)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            db.del_chanel(message.text)
            await bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–∞–Ω–∞–ª", reply_markup=AdminError)
        except:
            await bot.send_message(call.message.chat.id, "–ö–∞–Ω–∞–ª–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç",reply_markup=chanel_back1)
        await state.finish()

@dp.callback_query_handler(text=["get_film"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    films = db.get_film1()
    s = "–ò–º–µ—é—â–∏–π—Å—è —Ñ–∏–ª—å–º—ã:\n"
    i = 1
    for film in films:
        s+=f'{i}) –ö–æ–¥ —Ñ–∏–ª—å–º–∞: {film[0]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {film[1]}\n–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {film[2]}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film[3]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {film[4]}\n\n'
    await bot.send_message(call.message.chat.id, s, reply_markup=gotohome)
    #await bot.send_photo(call.message.chat.id, photo=films[1][5])

@dp.callback_query_handler(text=["get_series"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    series = db.get_series1()
    s = "–ò–º–µ—é—â–∏–π—Å—è —Å–µ—Ä–∏–∞–ª—ã:\n"
    i = 1
    for film in series:
        s+=f'{i}) –ö–æ–¥ —Å–µ—Ä–∏–∞–ª–∞: {film[0]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {film[1]}\n–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {film[2]}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film[3]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {film[4]}\n\n'
    await bot.send_message(call.message.chat.id, s, reply_markup=gotohome)

@dp.callback_query_handler(text=["get_admin"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    admins = db.get_admins()
    s = "–ò–º–µ—é—â–∏–π—Å—è –ê–¥–º–∏–Ω—ã:\n"
    i = 1
    for admin in admins:
        s+=f'{i}) Id –ê–¥–º–∏–Ω–∞: {admin}\n'
    await bot.send_message(call.message.chat.id, s, reply_markup=gotohome)

@dp.callback_query_handler(text=["get_chanel"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    chanels = db.get_chanels()
    s = "–ò–º–µ—é—â–∏–π—Å—è –∫–∞–Ω–∞–ª—ã:\n"
    i = 1
    for chanel in chanels:
        s+=f'{i}) –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {chanel[0]}\n: Id –∫–∞–Ω–∞–ª–∞: {chanel[1]}\nUrl –∫–∞–Ω–∞–ª–∞: {chanel[2]}\n\n'
    await bot.send_message(call.message.chat.id, s, reply_markup=gotohome)

@dp.callback_query_handler(text="random", state="*")
async def back(call: types.CallbackQuery, state: FSMContext):
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
                               reply_markup=get_chanels())
    else:
        mas = db.get_series1()
        mas1 = db.get_film1()
        type = random.randint(1,2)
        if len(mas) == 0:
            type = 2
        elif len(mas1) == 0:
            type = 2
        elif len(mas1) == 0 and len(mas):
            await bot.send_message(chat_id=call.message.chat.id,text="–ü–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∏ —Ñ–∏–ª—å–º–∞,–Ω–∏ —Å–µ—Ä–∏–∞–ª–∞")
        if type == 1:
            series = random.choice(mas)
            s = f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞:{series[1]}\n\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {series[3]} –º–∏–Ω—É—Ç\n\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {series[2]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{series[4]}\n\n'
            await bot.send_photo(chat_id=call.message.chat.id, caption=s, photo=series[5])
        else:
            series = random.choice(mas1)
            s = f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:{series[1]}\n\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {series[3]} –º–∏–Ω—É—Ç\n\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {series[2]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{series[4]}\n\n'
            await bot.send_photo(chat_id=call.message.chat.id, caption=s, photo=series[5])
        await bot.send_message(call.message.chat.id, '–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=gotohome)



@dp.callback_query_handler(text="back", state="*")
async def back(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
                               reply_markup=get_chanels())
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= 'üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>.\n\n<a href="https://bot.kinozzz.ru/poster/general.png">üé¶</a> –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>—Ä–∞–∑–¥–µ–ª</b>, –≤ –∫–æ—Ç–æ—Ä–æ–º –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.', reply_markup=inlinekeyboard, inline_message_id=call.inline_message_id)

@dp.message_handler(content_types=['text'])
async def send_all(message):
  await bot.send_message(message.from_user.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)



async def on_startup(dp: Dispatcher):
    print('~~~ Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! ~~~')
    print('~~~ –ó–∞—Ö–æ–¥–∏ –∫ –Ω–∞–º –Ω–∞ —Ñ–æ—Ä—É–º ~~~')
    print('~~~ url - https://na-sha.ru/ ~~~')
    await bot.send_message(chat_id=admin_id[0], text='üöÄ <b>–í–∞—à Bot</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ <b>/start</b>\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É <b>/stats</b>\n–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É <b>/all –∏ –í–∞—à —Ç–µ–∫—Å—Ç</b>')#–¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    # await update_popular_anime()
    # await update_popular_mult()
    # await update_news_films()
    # await update_popular()
    # await update_collections()
    # await update_popular_show()
    '''
    scheduler.add_job(update_news_films, 'cron', hour=11, minute=16)
    scheduler.add_job(update_news_serials, 'cron', hour=12, minute=29)
    scheduler.add_job(update_news_show, 'cron', hour=13, minute=18)
    # scheduler.add_job(update_domain, 'interval', minutes=60)
    scheduler.add_job(update_popular, 'cron', hour=1, minute=10)
    scheduler.add_job(update_popular_mult, 'cron', hour=2, minute=30)
    scheduler.add_job(update_popular_anime, 'cron', hour=3, minute=50)
    scheduler.add_job(update_popular_show, 'cron', hour=5, minute=40)
    scheduler.add_job(update_collections_films, 'cron', hour=7, minute=10)
    scheduler.add_job(update_collections, 'cron', hour=23, minute=40)
    '''
if __name__ == "__main__":
    scheduler = AsyncIOScheduler(timezone="Europe/Minsk")
    scheduler.start()
    executor.start_polling(dp, on_startup=on_startup)

