
import io
import random

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import BotBlocked
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import *
from db import Sqliter
from keyboards import *
import telebot

TOKE = telebot.TeleBot('6224595520:AAHleliFiUuB4iXh7qtTY2BZTUO2JiVlgl4')
TOKEN = '6224595520:AAHleliFiUuB4iXh7qtTY2BZTUO2JiVlgl4'
admins = [1953285692]
chat = -1001814242986

bot = Bot(token=TOKEN, parse_mode='HTML')
admin_id = admins
chatid = chat
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()
db = Sqliter('database.db')
temp_film = []
temp_series = []
temp_chanel = []




'''
'''
class GetUserInfo(StatesGroup):
    us_zapros_video = State()
    us_zapros_film = State()
    us_zapros_serial = State()
    us_zapros_animefilm = State()
    us_zapros_animeser = State()
    us_zapros_cartoon = State()
    us_zapros_cartoonser = State()
    us_zapros_tv = State()
    us_zapros_film_number = State()
    us_zapros_serial_number = State()
    us_zapros_animefilm_number = State()
    us_zapros_animeser_number = State()
    us_zapros_cartoon_number = State()
    us_zapros_cartoonser_number = State()
    us_zapros_tv_number = State()
    us_add_film = State()
    us_add_series = State()
    us_add_admin = State()
    us_add_chanel = State()
    us_del_film = State()
    us_del_series = State()
    us_del_admin = State()
    us_del_chanel = State()
    us_add_film1 = State()
    us_add_film2 = State()
    us_add_film3 = State()
    us_add_film4 = State()
    us_add_film5 = State()
    us_add_film6 = State()
    us_add_series1 = State()
    us_add_series2 = State()
    us_add_series3 = State()
    us_add_series4 = State()
    us_add_series5 = State()
    us_add_series6 = State()
    us_add_chanel1 = State()
    us_add_chanel2 = State()
    us_add_chanel3 = State()
    search_film = State()
    search_series = State()



database = open("users_id.txt", "r", encoding="utf-8")
datausers = set()
for line in database:
    datausers.add(line.strip())
database.close()

@dp.callback_query_handler(text="about", state="*")
async def send(call: types.CallbackQuery):
  await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/about.png">üéûÔ∏è</a> <b><u>Kinozzz Bot</u></b> ‚Äî <b>–ø–µ—Ä–≤—ã–π –æ–Ω–ª–∞–π–Ω-–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä</b> –≤ Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b><u>–±–µ—Å–ø–ª–∞—Ç–Ω–æ</u></b> –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –Ω–æ–≤–∏–Ω–∫–∞–º–∏ <b>–†–æ—Å—Å–∏–π—Å–∫–æ–≥–æ</b> –∏ <b>–∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ</b> –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∞.\n\nüí° <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n‚Äî –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤, –¢–í-—à–æ—É, –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏ —Ç.–ø. –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é;\n‚Äî <b>–ü–æ–¥–±–æ—Ä–∫–∏</b> –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤;\n‚Äî –§—É–Ω–∫—Ü–∏—è <b>¬´–ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏¬ª</b>, —á—Ç–æ–±—ã –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º;\n‚Äî –£–¥–æ–±–Ω—ã–π –ø–ª–µ–µ—Ä;\n‚Äî –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞;\n‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∞–º–∏ –∫–∏–Ω–æ.', reply_markup=about)

@dp.callback_query_handler(text="contacts", state="*")
async def send(call: types.CallbackQuery):
  await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '–ü–æ –ø–æ–≤–æ–¥—É —Ä–µ–∫–ª–∞–º—ã –ø–∏—Å–∞—Ç—å https://t.me/Informis_mors', reply_markup=AdminError)

async def check_sub_channel(chanels,user_id):
    try:
        for chanel in chanels:
            chat_member = await bot.get_chat_member(chat_id=chanel[1],user_id=user_id)
            if chat_member['status'] == 'left':
                return False
        return True
    except:
        return False




@dp.callback_query_handler(text = 'subchanneldone')
async def subchanneldone(message:types.Message):
    CHANNELS = db.get_chanels()
    if await check_sub_channel(CHANNELS, message.from_user.id):
        await bot.send_message(message.from_user.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")
        await bot.send_message(chat_id=message.from_user.id,
                                    text='üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>.\n\n<a href="https://bot.kinozzz.ru/poster/general.png">üé¶</a> –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>—Ä–∞–∑–¥–µ–ª</b>, –≤ –∫–æ—Ç–æ—Ä–æ–º –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.',
                                    reply_markup=inlinekeyboard)

    else:
        await bot.send_message(chat_id=message.from_user.id, text="‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", reply_markup=get_chanels())

@dp.message_handler(commands = ['start'])
async def start(message:types.Message):
    if message.chat.type == 'private':
        temp = get_chanels()
        await bot.send_message(chat_id=message.from_user.id, text=" üí¨ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã",reply_markup=temp)

@dp.callback_query_handler(text="poisk", state="*")
async def send(call: types.CallbackQuery):
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",reply_markup=get_chanels())
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/poisk.png">üîç</a> –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ —Ñ–∏–ª—å–º–∞.', reply_markup=search)

#–ø–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–∞ –ø–æ –∫–æ–¥—É
@dp.callback_query_handler(text="search_series", state="*")
async def send(call: types.CallbackQuery):
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",reply_markup=get_chanels())
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä–∏–∞–ª–∞.')
        await GetUserInfo.search_series.set()
        await call.answer()
        @dp.message_handler(state=GetUserInfo.search_series)
        async def handle_text(message: types.Message, state: FSMContext):
            series = db.get_series(message.text)
            if(series):
                s = f'üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞:{series[0][1]}\n\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {series[0][3]} –º–∏–Ω—É—Ç\n\nüî¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {series[0][2]}\n\n üí¨ –û–ø–∏—Å–∞–Ω–∏–µ:\n{series[0][4]}\n\n'
                await bot.send_photo(chat_id=message.from_user.id, caption=s, photo=series[0][5])
                await bot.send_message(message.from_user.id, '‚¨ÖÔ∏è–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É?', reply_markup=search_back)
            else:
                await bot.send_message(message.from_user.id, '‚ùå  –°–µ—Ä–∏–∞–ª–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=search_back)
            await state.finish()
#–ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–æ–¥—É
@dp.callback_query_handler(text="search_films", state="*")
async def send(call: types.CallbackQuery):
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
                               reply_markup=get_chanels())
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.')
        await GetUserInfo.search_film.set()
        await call.answer()
        @dp.message_handler(state=GetUserInfo.search_film)
        async def handle_text(message: types.Message, state: FSMContext):

            film = db.get_film(message.text)
            if(film):
                s = f'üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:{film[0][1]}\n\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film[0][3]} –º–∏–Ω—É—Ç\n\n üî¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {film[0][2]}\n\n üí¨ –û–ø–∏—Å–∞–Ω–∏–µ:\n{film[0][4]}\n\n'
                photo_binary = io.BytesIO(film[0][5])

                # Create an instance of InputFile with the binary data and send it
                photo_input = types.InputFile(photo_binary)
                await bot.send_photo(chat_id=message.from_user.id,caption=s, photo=photo_input)
                await bot.send_message(message.from_user.id, 'üîç –•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É?', reply_markup=search_back)
            else:
                await bot.send_message(message.from_user.id, ' ‚ùå –§–∏–ª—å–º–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',reply_markup=search_back)
            await state.finish()
@dp.message_handler(commands=["admin"])
async def send_all(message):
  admins = db.get_admins()
  if message.from_user.id not in admins:
    await bot.send_message(message.from_user.id, " ‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=AdminError)
  else:
      await bot.send_message(message.from_user.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=Admin)

@dp.callback_query_handler(text=["add_film"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    temp_film = []
    await bot.send_message(call.message.chat.id, "üî¢ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞",reply_markup=Admin_back1)
    await GetUserInfo.us_add_film1.set()
    await call.answer()

    @dp.message_handler(state=GetUserInfo.us_add_film1)
    async def handle_text(message: types.Message, state: FSMContext):
        global temp_film
        temp_film.append(message.text)
        await bot.send_message(message.from_user.id,"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞",reply_markup=Admin_back1)
        await state.finish()
        await GetUserInfo.us_add_film2.set()

        @dp.message_handler(state=GetUserInfo.us_add_film2)
        async def handle_text(message: types.Message, state: FSMContext):
            global temp_film
            temp_film.append(message.text)
            await bot.send_message(message.from_user.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–∞", reply_markup=Admin_back1)
            await state.finish()
            await GetUserInfo.us_add_film3.set()


            @dp.message_handler(state=GetUserInfo.us_add_film3)
            async def handle_text(message: types.Message, state: FSMContext):
                global temp_film
                temp_film.append(message.text)
                await bot.send_message(message.from_user.id, "üî¢ –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö", reply_markup=Admin_back1)
                await state.finish()
                await GetUserInfo.us_add_film4.set()


                @dp.message_handler(state=GetUserInfo.us_add_film4)
                async def handle_text(message: types.Message, state: FSMContext):
                    global temp_film
                    temp_film.append(message.text)
                    await bot.send_message(message.from_user.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞", reply_markup=Admin_back1)
                    await state.finish()
                    await GetUserInfo.us_add_film5.set()

                    @dp.message_handler(state=GetUserInfo.us_add_film5)
                    async def handle_text(message: types.Message, state: FSMContext):
                        global temp_film
                        temp_film.append(message.text)
                        await bot.send_message(message.from_user.id, "üñºÔ∏è –°–∫–∏–Ω—å—Ç–µ –ø–æ—Å—Ç–µ—Ä", reply_markup=Admin_back1)
                        await state.finish()
                        await GetUserInfo.us_add_film6.set()

                        @dp.message_handler(content_types=['photo'],state=GetUserInfo.us_add_film6)
                        async def handle_text(message: types.Message, state: FSMContext):
                            global temp_film
                            try:
                                await message.photo[-1].download(destination_file='D:\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–ë–æ—Ç\images\emp.jpg')
                                with open('D:\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–ë–æ—Ç\images\emp.jpg', 'rb') as f:
                                    img_data = f.read()
                                temp_film.append(img_data)
                                temp_film = temp_film[-6:-1]
                                temp_film.append(img_data)
                                db.add_film(temp_film)
                                await bot.send_message(message.from_user.id, "‚úÖ –§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=gotohome)
                                await state.finish()
                            except:
                                 await bot.send_message(message.from_user.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ',reply_markup=film_back)




    #await state.finish()


@dp.callback_query_handler(text=["add_series"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    temp_film = []
    await bot.send_message(call.message.chat.id, "üî¢ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä–∏–∞–ª–∞",reply_markup=Admin_back1)
    await GetUserInfo.us_add_series1.set()
    await call.answer()

    @dp.message_handler(state=GetUserInfo.us_add_series1)
    async def handle_text(message: types.Message, state: FSMContext):
        global temp_film
        temp_film.append(message.text)
        await bot.send_message(message.from_user.id,"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞",reply_markup=Admin_back1)
        await state.finish()
        await GetUserInfo.us_add_series2.set()

        @dp.message_handler(state=GetUserInfo.us_add_series2)
        async def handle_text(message: types.Message, state: FSMContext):
            global temp_film
            temp_film.append(message.text)
            await bot.send_message(message.from_user.id, "üî¢ –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞ —Å–µ—Ä–∏–∞–ª–∞", reply_markup=Admin_back1)
            await state.finish()
            await GetUserInfo.us_add_series3.set()


            @dp.message_handler(state=GetUserInfo.us_add_series3)
            async def handle_text(message: types.Message, state: FSMContext):
                global temp_film
                temp_film.append(message.text)
                await bot.send_message(message.from_user.id, " üî¢ –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–∏–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö", reply_markup=Admin_back1)
                await state.finish()
                await GetUserInfo.us_add_series4.set()


                @dp.message_handler(state=GetUserInfo.us_add_series4)
                async def handle_text(message: types.Message, state: FSMContext):
                    global temp_film
                    temp_film.append(message.text)
                    await bot.send_message(message.from_user.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞", reply_markup=Admin_back1)
                    await state.finish()
                    await GetUserInfo.us_add_series5.set()

                    @dp.message_handler(state=GetUserInfo.us_add_series5)
                    async def handle_text(message: types.Message, state: FSMContext):
                        global temp_film
                        temp_film.append(message.text)
                        await bot.send_message(message.from_user.id, "üñºÔ∏è –°–∫–∏–Ω—å—Ç–µ –ø–æ—Å—Ç–µ—Ä", reply_markup=Admin_back1)
                        await state.finish()
                        await GetUserInfo.us_add_series6.set()

                        @dp.message_handler(content_types=['photo'], state=GetUserInfo.us_add_series6)
                        async def handle_text(message: types.Message, state: FSMContext):
                            global temp_film
                            await message.photo[-1].download(destination_file='emp.jpg')
                            with open('emp.jpg', 'rb') as f:
                                img_data = f.read()
                            print(temp_film)
                            temp_film.append(img_data)

                            temp_film = temp_film[-6:-1]
                            temp_film.append(img_data)

                            db.add_series(temp_film)
                            await bot.send_message(message.from_user.id, "‚úÖ –°–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                                                   reply_markup=gotohome)

                            await state.finish()



@dp.callback_query_handler(text=["add_chanel"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f' ‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:

    await bot.send_message(call.message.chat.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",reply_markup=Admin_back1)
    await GetUserInfo.us_add_chanel1.set()
    await call.answer()

    @dp.message_handler(state=GetUserInfo.us_add_chanel1)
    async def handle_text(message: types.Message, state: FSMContext):
        global temp_film
        temp_film = []
        temp_film.append(message.text)
        print(temp_film)
        await bot.send_message(message.from_user.id," üî¢ –ù–∞–ø–∏—à–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞",reply_markup=Admin_back1)
        await state.finish()
        await GetUserInfo.us_add_chanel2.set()

        @dp.message_handler(state=GetUserInfo.us_add_chanel2)
        async def handle_text(message: types.Message, state: FSMContext):
            global temp_film
            temp_film.append(message.text)
            print(temp_film)
            await state.finish()
            try:
                chat_member = await bot.get_chat_member(chat_id=message.text, user_id=message.from_user.id)
                await bot.send_message(message.from_user.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ Url –∫–∞–Ω–∞–ª–∞", reply_markup=Admin_back1)
                await GetUserInfo.us_add_chanel3.set()
            except:
                await bot.send_message(message.from_user.id, "üí¨ –û—à–∏–±–∫–∞ —É –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É!", reply_markup=chanel_back)





            @dp.message_handler(state=GetUserInfo.us_add_chanel3)
            async def handle_text(message: types.Message, state: FSMContext):
                global temp_film
                temp_film.append(message.text)
                print(temp_film)
                try:
                    db.add_chanel(temp_film)
                    await bot.send_message(message.from_user.id, '‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=AdminError)
                except:
                    await bot.send_message(message.from_user.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ', reply_markup=chanel_back)
                await state.finish()


@dp.callback_query_handler(text=["add_admin"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "üî¢ –ù–∞–ø–∏—à–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞",reply_markup=Admin_back1)
    await GetUserInfo.us_add_admin.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_add_admin)
    async def handle_text(message: types.Message, state: FSMContext):
        data = []
        if not message.text.isdigit():  
            await state.finish()
            await bot.send_message(message.from_user.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ', reply_markup=Admin_back)
        else:
            data.append(message.text)
            try:
                db.add_admin(data)
                await bot.send_message(message.from_user.id, '‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=AdminError)
            except:
                await bot.send_message(message.from_user.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ', reply_markup=Admin_back)
            await state.finish()



@dp.callback_query_handler(text=["del_film"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=Admin_back1)
    await GetUserInfo.us_del_film.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_del_film)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            db.del_film(message.text)
            await bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ñ–∏–ª—å–º", reply_markup=AdminError)
        except:
            await bot.send_message(call.message.chat.id, "‚ùå –ö–æ–¥–∞ c —Ç–∞–∫–∏–º —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç",reply_markup=film_back1)
        await state.finish()

@dp.callback_query_handler(text=["del_series"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä–∏–∞–ª–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=Admin_back1)
    await GetUserInfo.us_del_series.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_del_series)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            db.del_series(message.text)
            await bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–µ—Ä–∏–∞–ª", reply_markup=AdminError)
        except:
            await bot.send_message(call.message.chat.id, "‚ùå –ö–æ–¥–∞ c —Ç–∞–∫–∏–º —Å–µ—Ä–∏–∞–ª–æ–º –Ω–µ—Ç—É",reply_markup=series_back1)
        await state.finish()

@dp.callback_query_handler(text=["del_admin"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=Admin_back1)
    await GetUserInfo.us_del_admin.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_del_admin)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            db.del_admin(message.text)
            await bot.send_message(call.message.chat.id, " ‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∞–¥–º–∏–Ω–∞", reply_markup=AdminError)
        except:
            await bot.send_message(call.message.chat.id, "‚ùå –ê–¥–º–∏–Ω–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç",reply_markup=admin_back1)
        await state.finish()

@dp.callback_query_handler(text=["del_chanel"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    await bot.send_message(call.message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",reply_markup=Admin_back1)
    await GetUserInfo.us_del_chanel.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_del_chanel)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            db.del_chanel(message.text)
            await bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–∞–Ω–∞–ª", reply_markup=AdminError)
        except:
            await bot.send_message(call.message.chat.id, "‚ùå –ö–∞–Ω–∞–ª–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç",reply_markup=chanel_back1)
        await state.finish()

@dp.callback_query_handler(text=["get_film"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    films = db.get_film1()
    s = "üìã –ò–º–µ—é—â–∏–µ—Å—è —Ñ–∏–ª—å–º—ã:\n"
    i = 1
    for film in films:
        s+=f'{i})üî¢ –ö–æ–¥ —Ñ–∏–ª—å–º–∞: {film[0]}\nüí¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {film[1]}\n üî¢ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {film[2]}\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film[3]}\nüí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {film[4]}\n\n'
        i+=1
    await bot.send_message(call.message.chat.id, s, reply_markup=gotohome)
    #await bot.send_photo(call.message.chat.id, photo=films[1][5])

@dp.callback_query_handler(text=["get_series"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    series = db.get_series1()
    s = "üìã –ò–º–µ—é—â–∏–π—Å—è —Å–µ—Ä–∏–∞–ª—ã:\n"
    i = 1
    for film in series:
        s += f'{i})üî¢ –ö–æ–¥ —Å–µ—Ä–∏–∞–ª–∞: {film[0]}\nüí¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {film[1]}\n üî¢ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {film[2]}\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film[3]}\nüí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {film[4]}\n\n'
        i += 1
    await bot.send_message(call.message.chat.id, s, reply_markup=gotohome)

@dp.callback_query_handler(text=["get_admin"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    admins = db.get_admins()
    s = "üìã –ò–º–µ—é—â–∏–µ—Å—è –ê–¥–º–∏–Ω—ã:\n"
    i = 1
    for admin in admins:
        s+=f'{i}) üî¢ Id –ê–¥–º–∏–Ω–∞: {admin}\n'
        i += 1
    await bot.send_message(call.message.chat.id, s, reply_markup=gotohome)

@dp.callback_query_handler(text=["get_chanel"])
async def add_(call: types.CallbackQuery):
  admins = db.get_admins()
  if call.message.chat.id not in admins:
    await bot.send_message(call.message.chat.id, f'‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)
  else:
    chanels = db.get_chanels()
    s = "üìã –ò–º–µ—é—â–∏–µ—Å—è –∫–∞–Ω–∞–ª—ã:\n"
    i = 1
    for chanel in chanels:
        s+=f'{i}) üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {chanel[0]}\n: üî¢ Id –∫–∞–Ω–∞–ª–∞: {chanel[1]}\nüí¨ Url –∫–∞–Ω–∞–ª–∞: {chanel[2]}\n\n'
        i += 1
    await bot.send_message(call.message.chat.id, s, reply_markup=gotohome)

@dp.callback_query_handler(text="random", state="*")
async def back(call: types.CallbackQuery, state: FSMContext):
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
                               reply_markup=get_chanels())
    else:
        mas = db.get_series1()
        mas1 = db.get_film1()
        type = random.randint(1,2)
        if len(mas) == 0:
            type = 2
        elif len(mas1) == 0:
            type = 1
        elif len(mas1) == 0 and len(mas):
            await bot.send_message(chat_id=call.message.chat.id,text="‚ùå –ü–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ —Ñ–∏–ª—å–º–∞,–Ω–∏ —Å–µ—Ä–∏–∞–ª–∞")
        if type == 1:
            film = random.choice(mas)
            s = f'üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞:{film[1]}\n\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film[3]} –º–∏–Ω—É—Ç\n\nüî¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {film[2]}\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{film[4]}\n\n'
            photo_binary = io.BytesIO(film[5])

            # Create an instance of InputFile with the binary data and send it
            photo_input = types.InputFile(photo_binary)
            await bot.send_photo(chat_id=call.message.chat.id, caption=s, photo=photo_input)
        else:
            film = random.choice(mas1)
            s = f'üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:{film[1]}\n\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film[3]} –º–∏–Ω—É—Ç\n\nüî¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {film[2]}\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{film[4]}\n\n'
            photo_binary = io.BytesIO(film[5])

            # Create an instance of InputFile with the binary data and send it
            photo_input = types.InputFile(photo_binary)
            await bot.send_photo(chat_id=call.message.chat.id, caption=s, photo=photo_input)
        await bot.send_message(call.message.chat.id, ' ‚¨ÖÔ∏è–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?', reply_markup=gotohome)



@dp.callback_query_handler(text="back", state="*")
async def back(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    CHANNELS = db.get_chanels()
    if not await check_sub_channel(CHANNELS, call.message.chat.id):
        await bot.send_message(chat_id=call.message.chat.id, text="‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
                               reply_markup=get_chanels())
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= 'üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>.\n\n<a href="https://bot.kinozzz.ru/poster/general.png">üé¶</a> –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>—Ä–∞–∑–¥–µ–ª</b>, –≤ –∫–æ—Ç–æ—Ä–æ–º –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.', reply_markup=inlinekeyboard, inline_message_id=call.inline_message_id)

@dp.message_handler(content_types=['text'])
async def send_all(message):
  with open('D:\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–ë–æ—Ç\photo_2023-04-15_02-41-33.jpg', 'rb') as f:
    img_data = f.read()
  await bot.send_photo(chat_id=message.from_user.id,photo=img_data,caption="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!")
  await bot.send_message(message.from_user.id, f'<i>‚¨ÖÔ∏è–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)



async def on_startup(dp: Dispatcher):
    print(' ü§ñ‚úÖ Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    try:
        await bot.send_message(chat_id=admin_id[0], text='üöÄ <b>ü§ñ‚úÖ –í–∞—à Bot</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ <b>/start</b>\n')#–¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    except BotBlocked as E:
        pass

    # await update_popular_anime()
    # await update_popular_mult()
    # await update_news_films()
    # await update_popular()
    # await update_collections()
    # await update_popular_show()
    '''
    scheduler.add_job(update_news_films, 'cron', hour=11, minute=16)
    scheduler.add_job(update_news_serials, 'cron', hour=12, minute=29)
    scheduler.add_job(update_news_show, 'cron', hour=13, minute=18)
    # scheduler.add_job(update_domain, 'interval', minutes=60)
    scheduler.add_job(update_popular, 'cron', hour=1, minute=10)
    scheduler.add_job(update_popular_mult, 'cron', hour=2, minute=30)
    scheduler.add_job(update_popular_anime, 'cron', hour=3, minute=50)
    scheduler.add_job(update_popular_show, 'cron', hour=5, minute=40)
    scheduler.add_job(update_collections_films, 'cron', hour=7, minute=10)
    scheduler.add_job(update_collections, 'cron', hour=23, minute=40)
    '''
if __name__ == "__main__":
    scheduler = AsyncIOScheduler(timezone="Europe/Minsk")
    scheduler.start()
    executor.start_polling(dp, on_startup=on_startup)

